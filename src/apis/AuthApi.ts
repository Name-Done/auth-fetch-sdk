/* tslint:disable */
/* eslint-disable */
/**
 * Name Done - Auth Service
 * An authentication service API for Name Done
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BadRequestResponseDto,
  LoginRequestDto,
  LoginResponseDto,
  RefreshTokenRequestDto,
  RefreshTokenResponseDto,
  UnauthorizedResponseDto,
} from '../models';
import {
    BadRequestResponseDtoFromJSON,
    BadRequestResponseDtoToJSON,
    LoginRequestDtoFromJSON,
    LoginRequestDtoToJSON,
    LoginResponseDtoFromJSON,
    LoginResponseDtoToJSON,
    RefreshTokenRequestDtoFromJSON,
    RefreshTokenRequestDtoToJSON,
    RefreshTokenResponseDtoFromJSON,
    RefreshTokenResponseDtoToJSON,
    UnauthorizedResponseDtoFromJSON,
    UnauthorizedResponseDtoToJSON,
} from '../models';

export interface UserControllerLoginRequest {
    loginRequestDto: LoginRequestDto;
}

export interface UserControllerRefreshTokenRequest {
    refreshTokenRequestDto: RefreshTokenRequestDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Log in a user
     */
    async userControllerLoginRaw(requestParameters: UserControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponseDto>> {
        if (requestParameters.loginRequestDto === null || requestParameters.loginRequestDto === undefined) {
            throw new runtime.RequiredError('loginRequestDto','Required parameter requestParameters.loginRequestDto was null or undefined when calling userControllerLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestDtoToJSON(requestParameters.loginRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseDtoFromJSON(jsonValue));
    }

    /**
     * Log in a user
     */
    async userControllerLogin(requestParameters: UserControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponseDto> {
        const response = await this.userControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh user tokens
     */
    async userControllerRefreshTokenRaw(requestParameters: UserControllerRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponseDto>> {
        if (requestParameters.refreshTokenRequestDto === null || requestParameters.refreshTokenRequestDto === undefined) {
            throw new runtime.RequiredError('refreshTokenRequestDto','Required parameter requestParameters.refreshTokenRequestDto was null or undefined when calling userControllerRefreshToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/refresh-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestDtoToJSON(requestParameters.refreshTokenRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Refresh user tokens
     */
    async userControllerRefreshToken(requestParameters: UserControllerRefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponseDto> {
        const response = await this.userControllerRefreshTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
